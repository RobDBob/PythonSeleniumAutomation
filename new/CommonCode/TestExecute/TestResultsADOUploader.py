import base64
import os
from CommonCode.API import APIConstants
from CommonCode.API.ADORequests import AccessTokenEnum, ADORequests
from CommonCode.TestExecute.ExecuteEnums import ConfigOptions
from CommonCode.TestExecute.Logging import PrintMessage
from CommonCode.TestExecute.Objects.TestsResultsContainer import TestsResultsContainer
from CommonCode.TestExecute.TestContext import TestContext
from StandAlone.MultiDayTests.MultiDayTestObjs import TestObj


class TestResultsADOUploader:
    """
    used to upload test results to ADO
    each instance is created for each execution bucket in parallel testing
    """

    def __init__(self, testContext: TestContext):
        self.testContext: TestContext = testContext
        self.adoRequestsWorkItems = ADORequests(AccessTokenEnum.WORK_ITEM_READ_ACCESS_TOKEN)
        self.adoRequestsTestPlan = ADORequests(AccessTokenEnum.TEST_PLAN_WRITE_ACCESS_TOKEN)

    def _getBase64ScreenshotRepr(self, filePath):
        with open(filePath, 'rb') as fp:
            content = fp.read()
            return base64.encodebytes(content)

    def _addResultsToADOTestSuite(self, testResultsContainer: TestsResultsContainer):
        self.adoRequestsTestPlan.addTestResultsToTestRun(self.testContext.getSetting(ConfigOptions.RUN_ID),
                                                         testResultsContainer.getTestResultsToAddToADO(self.adoRequestsWorkItems),
                                                         APIConstants.POST)

    def _updateResultsInADO(self, testResultsContainer: TestsResultsContainer):
        currentFailedResults = self.adoRequestsTestPlan.getTestResultsForTestRun(self.testContext.getSetting(ConfigOptions.RUN_ID),
                                                                                 filterByOutcomes=[APIConstants.TEST_OUTCOME_FAILED])

        self.adoRequestsTestPlan.addTestResultsToTestRun(self.testContext.getSetting(ConfigOptions.RUN_ID),
                                                         testResultsContainer.getTestResultsToUpdateInADO(currentFailedResults,
                                                                                                          self.adoRequestsWorkItems),
                                                         APIConstants.PATCH)

    def updateTestRunWithScreenshots(self):
        """
        Get files from screenshot folder
        Sort them by date
        Take oldest available - this should cover case of a re-run where new screenshots are generated
        """
        failedTests = self.adoRequestsTestPlan.getTestResultsForTestRun(self.testContext.getSetting(
            ConfigOptions.RUN_ID), filterByOutcomes=[APIConstants.TEST_OUTCOME_FAILED])

        screenshotFolder = self.testContext.getRequiredFolders('screenshots')
        screenshotFileNames = os.listdir(screenshotFolder)

        screenshotFiles = [os.path.join(screenshotFolder, f) for f in screenshotFileNames]  # add path to each file
        screenshotFiles.sort(key=os.path.getmtime)

        for testPlanResult in failedTests:
            if testPlanResult.get("outcome", "") != APIConstants.TEST_OUTCOME_FAILED:
                continue

            testCaseId = testPlanResult.get("testCase", {}).get("id", "UnknownResult")
            matchingFiles = [k for k in screenshotFiles if testCaseId in k]

            if not matchingFiles:
                PrintMessage(f"Matching screenshot for testCaseId '{testCaseId}' not found.")
                continue

            screenshotFilePath = matchingFiles[-1] if matchingFiles else "noScreenshotFound"

            png64base = self._getBase64ScreenshotRepr(screenshotFilePath)

            requestBody = {"stream": png64base.decode(),
                           "fileName": os.path.basename(screenshotFilePath),
                           "comment": "Test evidence",
                           "attachmentType": "GeneralAttachment"}

            PrintMessage(f"Adding screenshot {os.path.basename(screenshotFilePath)} for test case {testCaseId}")
            self.adoRequestsTestPlan.testRunResultsAddAttachment(self.testContext.getSetting(ConfigOptions.RUN_ID),
                                                                 testPlanResult["id"], requestBody)

    def uploadResultsToADO(self, testResultsContainer: TestsResultsContainer):
        """
        Execution process: bucket

        unitTestResults:- failed test results generated by unittest
        unitTests:- all unitTests executed for this bucket
        ADOTestData:- bridge between unittests & ado suite / tests
        """
        if not self.testContext.getSetting(ConfigOptions.TEST_PLAN):
            PrintMessage("uploadResults > No test plan supplied - skip result upload.")

        if self.testContext.getSetting(ConfigOptions.THIS_RUN_IS_RE_RUN):
            self._updateResultsInADO(testResultsContainer)
        else:
            self._addResultsToADOTestSuite(testResultsContainer)

        PrintMessage(f"Uploaded results for suite: '{testResultsContainer.testSuiteId}' and testRun: '{self.testContext.getSetting(ConfigOptions.RUN_ID)}'")

    def uploadMultiDayTestResultToADO(self, testObj: TestObj):
        # TODO: This code should really be combined with TestResultsContainer._getTestResultData

        if not self.testContext.getSetting(ConfigOptions.TEST_PLAN):
            PrintMessage("uploadResults > No test plan supplied - skip result upload.")

        testPointUpdateParams = []
        testOutcome = APIConstants.TEST_OUTCOME_PASSED if testObj.testOutcomePass else APIConstants.TEST_OUTCOME_FAILED

        workItemDetails: dict = self.adoRequestsWorkItems.getWorkItemByID(testObj.currentStageTestId)
        workItemRevisions: dict = self.adoRequestsWorkItems.executeRequestGetResponse("GET",
                                                                                      workItemDetails.get("_links", {}).get("workItemRevisions", {}).get("href"))
        workItemFields = workItemDetails.get("fields", {})

        testResult = {"testCaseRevision": workItemRevisions.get("count", 1),
                      "stackTrace": testObj.testErrorMessage,
                      "testCaseTitle": testObj.unitTestResult["testName"],
                      "automatedTestName": testObj.unitTestResult["testName"],
                      "automatedTestId": testObj.unitTestResult["testName"],
                      "testCase": {"id": testObj.currentStageTestId},
                      "testPoint": {"id": testObj.unitTestResult["testPointId"]},
                      "outcome": testOutcome,
                      "state": "Completed",
                      "comment": f"MultiTestStage completed, next stage: {testObj.nextStageTestId}",
                      "owner": workItemFields.get("System.AssignedTo"),
                      "runBy": workItemFields.get("System.AssignedTo")}

        testPointUpdateParams.append(testResult)

        self.adoRequestsTestPlan.addTestResultsToTestRun(testObj.runId,
                                                         testPointUpdateParams,
                                                         APIConstants.POST)

        PrintMessage(f"Uploaded results for multi-date-test: '{testObj.headerTestId}>{testObj.currentStageTestId}' stage and testRun: '{testObj.runId}'")
